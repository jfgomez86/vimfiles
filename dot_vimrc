call pathogen#runtime_append_all_bundles()

set rtp+=/usr/share/vim/addons
source ~/.vim/vimrc      "linux
" Indent
set cindent
set autoindent
set expandtab

" Tags
set tags+=tmp/tags

" No toolbars please
set guioptions-=m
set guioptions-=T

" I prefer 2 spaces instead of 4
set shiftwidth=2
set softtabstop=2

" Colorscheme Settings
colorscheme mustang
set columns=100
set lines=61
if has("gui")
  set colorcolumn=78
endif

" Make wildmenu matches case insensitive
set wildmode+=full

" Case insensitive search
set ignorecase

" Set temporary directory (don't litter local dir with swp/tmp files)
set directory=/tmp/

" Let the <leader> key be '
let mapleader = "'"

" Make sure that the directory where we want to put swap/backup files exists.
if ! len(glob("~/.backup/"))
  echomsg "Backup directory ~/.backup doesn't exist!"
  echomsg "Creating it..."
  exe ':!mkdir ~/.backup'
endif

" Remap F1 from Help to ESC.  No more accidents
nmap <F1> <Esc>
map! <F1> <Esc>

" Map NERDTreeToggle to <leader> p
nmap <silent> <Leader>p :NERDTreeToggle<CR>

" Move easily over splits
map <C-j> <C-W>w
map <C-k> <C-W>W

" Some readlines emacs default mappings
imap <C-a> <ESC>I
imap <C-e> <ESC>A

" Make enter split lines
map <Enter> o<ESC>

" Show me what I yanked
noremap ,re :registers<CR>

" Vim Settings
autocmd FileType vim map <F5> :so %<CR>

" Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" Squeeze blank lines with :Squeeze
command! -nargs=0 Squeeze %s/\s\+$//

" Make tags (requires ctags)
command! -nargs=0 Ctags !/usr/local/bin/ctags --tag-relative=yes -R -f tmp/tags .

" Make # surrounds actually make a ruby string interpolation
let g:surround_35 = "#{\r}"

" ,v reloads the ~/.vimrc file
nnoremap ,,v :e ~/.vimrc
nnoremap ,v :source ~/.vimrc

" Open the Ruby ApiDock page for the word under cursor, in a new Firefox tab
function! OpenRubyDoc(keyword)
  let url = 'http://apidock.com/ruby/'.a:keyword
  exec '!'.g:browser.' '.url.' &'
endfunction
noremap RB :call OpenRubyDoc(expand('<cword>'))<CR>

" Open the Rails ApiDock page for the word under cursos, in a new Firefox tab
function! OpenRailsDoc(keyword)
  let url = 'http://apidock.com/rails/'.a:keyword
  exec '!'.g:browser.' '.url.' &'
endfunction
noremap RR :call OpenRailsDoc(expand('<cword>'))<CR>

"command! -nargs=* -range IncrementNumbers ruby make_incremental_numbers(<line1>, <line2>, <f-args>)
"ruby << EOF
"def make_incremental_numbers(line1, line2, search_string, from_number)
"b = VIM::Buffer.current
"number = from_number.to_i
"for line in line1..line2
  "if b[line].match(/#{search_string}/)
    "b[line] = b[line].gsub(/#{search_string}/, number.to_s)
    "number += 1
  "end
"end
"end
"EOF

" Quitting quickly
command Q q
command W w
command WQ wq
command Wq wq

" Start with source folded
if has("folding")
  set foldenable
  set foldmethod=syntax
  set foldlevel=1
  set foldnestmax=2
  set foldtext=strpart(getline(v:foldstart),0,50).'\ ...\ '.substitute(getline(v:foldend),'^[\ #]*','','g').'\ '
endif

" Use Ack instead of Grep when available
if executable("ack")
  set grepprg=ack\ -H\ --nogroup\ --nocolor
endif

" Map <leader>tc to run the tests
map <Leader>tc <Plug>RubyFileRun

" Gist config
let g:gist_show_privates = 1
let g:gist_detect_filetype = 1

